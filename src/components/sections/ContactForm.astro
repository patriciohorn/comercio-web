---
import { Button } from '../ui/button';
const { labels, buttonText } = Astro.props;
---

<section
  class="py-10 px-6 border border-gray-200 bg-[#f5f5f5] rounded-3xl shadow-lg">
  <form
    action="https://api.web3forms.com/submit"
    method="POST"
    data-astro-reload
    id="form"
    novalidate
    class="needs-validation">
    <div class="h-captcha" data-captcha="false"></div>
    <div class="grid gap-x-8 gap-y-6 md:grid-cols-2">
      <input
        type="hidden"
        name="access_key"
        value="a99a01bd-4fd5-4a4e-bdff-4ab922ca1099"
      />

      <input type="hidden" name="from_name" value="Comweboc" />
      <input
        type="checkbox"
        name="botcheck"
        class="hidden"
        style="display: none;"
      />
      <div>
        <label for="name" class="block mb-2 font-medium text-gray-900"
          >{labels.name}*</label
        >
        <input
          required
          type="text"
          name="name"
          id="name"
          class="bg-gray-50 border border-gray-300 text-gray-900 rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5"
          placeholder=""
        />
        <div
          class="empty-feedback invalid-feedback text-red-400 text-sm mt-1">
          Please provide your full name.
        </div>
      </div>
      <div>
        <label
          for="email"
          class="block mb-2 font-medium text-gray-900"
          >{labels.email}*</label
        >
        <input
          required
          type="email"
          id="email"
          name="email"
          class="bg-gray-50 border border-gray-300 text-gray-900 rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5"
          placeholder=""
        />
        <div class="empty-feedback text-red-400 text-sm mt-1">
          Please provide your email address.
        </div>
        <div class="invalid-feedback text-red-400 text-sm mt-1">
          Please provide a valid email address.
        </div>
      </div>
      <div>
        <label
          for="phone"
          class="block mb-2 font-medium text-gray-900"
          >{labels.phone}*</label
        >
        <input
          required
          type="text"
          id="phone"
          name="phone"
          minlength="10"
          maxlength="10"
          class="bg-gray-50 border border-gray-300 text-gray-900 rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5"
          placeholder=""
          required
        />
        <div class="empty-feedback text-red-400 text-sm mt-1">
          Please provide your phone number.
        </div>
        <div class="invalid-feedback text-red-400 text-sm mt-1">
          Please provide a valid phone number.
        </div>
      </div>
      <div>
        <label
          for="company"
          class="block mb-2 font-medium text-gray-900"
          >{labels.company}*</label
        >
        <input
          type="text"
          id="company"
          required
          name="company"
          class="bg-gray-50 border border-gray-300 text-gray-900 rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5"
          placeholder=""
        />
        <div
          class="empty-feedback invalid-feedback text-red-400 text-sm mt-1">
          Please enter your company.
        </div>
      </div>
      <div class="md:col-span-2">
        <label
          for="asunto"
          class="block mb-2 font-medium text-gray-900"
          >{labels.subject}*</label
        >
        <input
          required
          type="text"
          id="subject"
          name="subject"
          class="bg-gray-50 border border-gray-300 text-gray-900 rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5"
          placeholder=""
        />
        <div
          class="empty-feedback invalid-feedback text-red-400 text-sm mt-1">
          Please enter a subject.
        </div>
      </div>
      <div class="md:col-span-2">
        <label
          for="mensaje"
          class="block mb-2 font-medium text-gray-900"
          >{labels.message}*</label
        >
        <textarea
          required
          id="message"
          name="message"
          rows="5"
          class="bg-gray-50 border border-gray-300 text-gray-900 rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 resize-none"
          placeholder=""></textarea>
        <div
          class="empty-feedback invalid-feedback text-red-400 text-sm mt-1">
          Please enter your message.
        </div>
      </div>
    </div>
    <div class="mt-6 h-captcha" data-captcha="true"></div>
    <Button size="lg" className="w-full mt-6">{buttonText}</Button>
    <div
      id="result"
      class="transition-colors transition-200 ease-in-out">
    </div>
  </form>
</section>

<style>
  .invalid-feedback,
  .empty-feedback {
    display: none;
  }

  .was-validated :placeholder-shown:invalid ~ .empty-feedback {
    display: block;
  }

  .was-validated
    :not(:placeholder-shown):invalid
    ~ .invalid-feedback {
    display: block;
  }

  .is-invalid,
  .was-validated :invalid {
    border-color: #dc3545;
  }
</style>
<script
  is:inline
  src="https://web3forms.com/client/script.js"
  async
  defer></script>
<script is:inline>
  // use astro:page-load event if you are using View Transitions

  document.addEventListener(
    'DOMContentLoaded',
    () => {
      const form = document.getElementById('form');
      const result = document.getElementById('result');

      form.addEventListener('submit', function (e) {
        e.preventDefault();
        form.classList.add('was-validated');
        if (!form.checkValidity()) {
          form.querySelectorAll(':invalid')[0].focus();
          return;
        }
        const formData = new FormData(form);
        const object = Object.fromEntries(formData);
        const json = JSON.stringify(object);

        result.innerHTML = 'Sending...';
        result.className =
          'text-center p-4 mt-6 text-blue-800 bg-blue-50 border border-blue-300 rounded-md';

        fetch('https://api.web3forms.com/submit', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            Accept: 'application/json',
          },
          body: json,
        })
          .then(async (response) => {
            let json = await response.json();
            if (response.status == 200) {
              result.className =
                'text-center p-4 mt-6 text-green-800 bg-green-50 border border-green-300 rounded-md';
              result.innerHTML = json.message;
            } else {
              console.log(response);
              result.className =
                'text-center p-4 mt-6 text-red-800 bg-red-50 border border-red-300 rounded-md';
              result.innerHTML = json.message;
            }
          })
          .catch((error) => {
            console.log(error);
            result.innerHTML = 'Something went wrong!';
          })
          .then(function () {
            form.reset();
            form.classList.remove('was-validated');
            setTimeout(() => {
              result.style.display = 'none';
            }, 5000);
          });
      });
    },
    { once: true }
  );
</script>
